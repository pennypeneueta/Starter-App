{"ast":null,"code":"import * as firebase from 'firebase';\nimport { toast } from './toast';\nconst config = {\n  apiKey: \"AIzaSyCLjdrODSs5L1eMhqLXxs5xfOCXwohR8fw\",\n  authDomain: \"starterapp-ed1e2.firebaseapp.com\",\n  databaseURL: \"https://starterapp-ed1e2.firebaseio.com\",\n  projectId: \"starterapp-ed1e2\",\n  storageBucket: \"starterapp-ed1e2.appspot.com\",\n  messagingSenderId: \"430195180790\",\n  appId: \"1:430195180790:web:4df5acacaf4f967850d8d7\",\n  measurementId: \"G-3ZQWXEG8FL\"\n};\nfirebase.initializeApp(config);\nexport function logoutUser() {\n  return firebase.auth().signOut();\n}\nexport function getCurrentUser() {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = firebase.auth().onAuthStateChanged(function (user) {\n      if (user) {\n        resolve(user);\n      } else {\n        resolve(null);\n      }\n\n      unsubscribe();\n    });\n  });\n}\nexport async function loginUser(username, password) {\n  //converts username into email to allow for firebase authentication\n  const email = `${username}@codedamn.com`;\n\n  try {\n    //if email and password are valid\n    const res = await firebase.auth().signInWithEmailAndPassword(email, password);\n    console.log(res); //user authenticated successfully\n\n    return res;\n  } catch (e) {\n    //if email and password are invalid\n    toast(e.message); //user will not be authenticated\n\n    return false;\n  }\n}\nexport async function registerUser(username, password) {\n  //converts username into email to allow for firebase authentication\n  const email = `${username}@codedamn.com`;\n\n  try {\n    const res = await firebase.auth().createUserWithEmailAndPassword(email, password);\n    console.log(res);\n    return true;\n  } catch (error) {\n    console.log(error);\n    toast(error.message);\n    return false;\n  }\n}","map":{"version":3,"sources":["/Users/penny/Desktop/starter/src/firebaseConfig.ts"],"names":["firebase","toast","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","logoutUser","auth","signOut","getCurrentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged","user","loginUser","username","password","email","res","signInWithEmailAndPassword","console","log","e","message","registerUser","createUserWithEmailAndPassword","error"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,UAA1B;AACA,SAAQC,KAAR,QAAoB,SAApB;AAIA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,kCAFD;AAGXC,EAAAA,WAAW,EAAE,yCAHF;AAIXC,EAAAA,SAAS,EAAE,kBAJA;AAKXC,EAAAA,aAAa,EAAE,8BALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAWAV,QAAQ,CAACW,aAAT,CAAuBT,MAAvB;AAEA,OAAO,SAASU,UAAT,GAAsB;AACzB,SAAOZ,QAAQ,CAACa,IAAT,GAAgBC,OAAhB,EAAP;AACH;AAED,OAAO,SAASC,cAAT,GAA0B;AAE7B,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAEpC,UAAMC,WAAW,GAAGnB,QAAQ,CAACa,IAAT,GAAgBO,kBAAhB,CAAmC,UAASC,IAAT,EAAc;AAEjE,UAAIA,IAAJ,EAAS;AACLJ,QAAAA,OAAO,CAACI,IAAD,CAAP;AACH,OAFD,MAGK;AACDJ,QAAAA,OAAO,CAAC,IAAD,CAAP;AACH;;AACDE,MAAAA,WAAW;AACd,KATmB,CAApB;AAUH,GAZM,CAAP;AAcH;AAED,OAAO,eAAeG,SAAf,CAAyBC,QAAzB,EAA2CC,QAA3C,EAA4D;AAEnE;AACA,QAAMC,KAAK,GAAI,GAAEF,QAAS,eAA1B;;AAEA,MAAG;AACC;AACA,UAAMG,GAAG,GAAG,MAAM1B,QAAQ,CAACa,IAAT,GAAgBc,0BAAhB,CACdF,KADc,EACPD,QADO,CAAlB;AAGAI,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,EALD,CAOC;;AACA,WAAOA,GAAP;AAEH,GAVD,CAUE,OAAOI,CAAP,EAAU;AACR;AACA7B,IAAAA,KAAK,CAAC6B,CAAC,CAACC,OAAH,CAAL,CAFQ,CAGR;;AACA,WAAO,KAAP;AACH;AACA;AAED,OAAO,eAAeC,YAAf,CAA4BT,QAA5B,EAA8CC,QAA9C,EAA+D;AAElE;AACA,QAAMC,KAAK,GAAI,GAAEF,QAAS,eAA1B;;AAEA,MAAG;AACC,UAAMG,GAAG,GAAG,MAAM1B,QAAQ,CAACa,IAAT,GAAgBoB,8BAAhB,CACjBR,KADiB,EACVD,QADU,CAAlB;AAGAI,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AAEA,WAAO,IAAP;AAEH,GARD,CAQE,OAAMQ,KAAN,EAAY;AACVN,IAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;AACAjC,IAAAA,KAAK,CAACiC,KAAK,CAACH,OAAP,CAAL;AACA,WAAO,KAAP;AACH;AACJ","sourcesContent":["import * as firebase from 'firebase'\nimport {toast} from './toast'\nimport { error } from 'console'\n\n\nconst config = {\n    apiKey: \"AIzaSyCLjdrODSs5L1eMhqLXxs5xfOCXwohR8fw\",\n    authDomain: \"starterapp-ed1e2.firebaseapp.com\",\n    databaseURL: \"https://starterapp-ed1e2.firebaseio.com\",\n    projectId: \"starterapp-ed1e2\",\n    storageBucket: \"starterapp-ed1e2.appspot.com\",\n    messagingSenderId: \"430195180790\",\n    appId: \"1:430195180790:web:4df5acacaf4f967850d8d7\",\n    measurementId: \"G-3ZQWXEG8FL\"\n}\n\nfirebase.initializeApp(config)\n\nexport function logoutUser() {\n    return firebase.auth().signOut()\n}\n\nexport function getCurrentUser() {\n\n    return new Promise((resolve, reject) => {\n\n        const unsubscribe = firebase.auth().onAuthStateChanged(function(user){\n\n            if (user){\n                resolve(user)\n            }\n            else {\n                resolve(null)\n            }\n            unsubscribe()\n        })\n    })\n\n}\n\nexport async function loginUser(username: string, password: string){\n\n//converts username into email to allow for firebase authentication\nconst email = `${username}@codedamn.com`\n\ntry{\n    //if email and password are valid\n    const res = await firebase.auth().signInWithEmailAndPassword(\n        email, password)\n\n    console.log(res)\n\n    //user authenticated successfully\n    return res\n\n} catch (e) {\n    //if email and password are invalid\n    toast(e.message)\n    //user will not be authenticated\n    return false \n}\n}\n\nexport async function registerUser(username: string, password: string){\n   \n    //converts username into email to allow for firebase authentication\n    const email = `${username}@codedamn.com`\n\n    try{\n        const res = await firebase.auth().createUserWithEmailAndPassword\n        (email, password)\n\n        console.log(res)\n\n        return true\n\n    } catch(error){\n        console.log(error)\n        toast(error.message)\n        return false\n    }\n}"]},"metadata":{},"sourceType":"module"}