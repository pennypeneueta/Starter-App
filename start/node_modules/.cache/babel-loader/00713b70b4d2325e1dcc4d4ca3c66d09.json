{"ast":null,"code":"import * as firebase from 'firebase';\nimport { toast } from './toast';\nconst config = {\n  apiKey: \"AIzaSyCLjdrODSs5L1eMhqLXxs5xfOCXwohR8fw\",\n  authDomain: \"starterapp-ed1e2.firebaseapp.com\",\n  databaseURL: \"https://starterapp-ed1e2.firebaseio.com\",\n  projectId: \"starterapp-ed1e2\",\n  storageBucket: \"starterapp-ed1e2.appspot.com\",\n  messagingSenderId: \"430195180790\",\n  appId: \"1:430195180790:web:4df5acacaf4f967850d8d7\",\n  measurementId: \"G-3ZQWXEG8FL\"\n};\nfirebase.initializeApp(config);\nexport async function loginUser(username, password) {\n  //converts username into email to allow for firebase authentication\n  const email = `${username}@gmail.com`;\n\n  try {\n    //if email and password are valid\n    const res = await firebase.auth().signInWithEmailAndPassword(email, password);\n    console.log(res); //user authenticated successfully\n\n    return true;\n  } catch (error) {\n    //if email and password are invalid\n    toast(error.message); //user will not be authenticated\n\n    return false;\n  }\n}\nexport async function registerUser(username, password) {\n  //converts username into email to allow for firebase authentication\n  const email = `${username}@codedamn.com`;\n\n  try {\n    const res = await firebase.auth().createUserWithEmailAndPassword(username, password);\n    console.log(res);\n    return true;\n  } catch (e) {\n    toast(e.message, 4000);\n    return false;\n  }\n}","map":{"version":3,"sources":["/Users/penny/Desktop/starter/src/firebaseConfig.ts"],"names":["firebase","toast","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","loginUser","username","password","email","res","auth","signInWithEmailAndPassword","console","log","error","message","registerUser","createUserWithEmailAndPassword","e"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,UAA1B;AACA,SAAQC,KAAR,QAAoB,SAApB;AAIA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,kCAFD;AAGXC,EAAAA,WAAW,EAAE,yCAHF;AAIXC,EAAAA,SAAS,EAAE,kBAJA;AAKXC,EAAAA,aAAa,EAAE,8BALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAWAV,QAAQ,CAACW,aAAT,CAAuBT,MAAvB;AAEA,OAAO,eAAeU,SAAf,CAAyBC,QAAzB,EAA2CC,QAA3C,EAA4D;AAEnE;AACA,QAAMC,KAAK,GAAI,GAAEF,QAAS,YAA1B;;AAEA,MAAG;AACC;AACA,UAAMG,GAAG,GAAG,MAAMhB,QAAQ,CAACiB,IAAT,GAAgBC,0BAAhB,CACdH,KADc,EACPD,QADO,CAAlB;AAGAK,IAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ,EALD,CAOC;;AACA,WAAO,IAAP;AAEH,GAVD,CAUE,OAAOK,KAAP,EAAc;AACZ;AACApB,IAAAA,KAAK,CAACoB,KAAK,CAACC,OAAP,CAAL,CAFY,CAGZ;;AACA,WAAO,KAAP;AACH;AACA;AAED,OAAO,eAAeC,YAAf,CAA4BV,QAA5B,EAA8CC,QAA9C,EAA+D;AAElE;AACA,QAAMC,KAAK,GAAI,GAAEF,QAAS,eAA1B;;AAEA,MAAG;AACC,UAAMG,GAAG,GAAG,MAAMhB,QAAQ,CAACiB,IAAT,GAAgBO,8BAAhB,CACjBX,QADiB,EACPC,QADO,CAAlB;AAEAK,IAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACA,WAAO,IAAP;AACH,GALD,CAKE,OAAMS,CAAN,EAAQ;AACNxB,IAAAA,KAAK,CAACwB,CAAC,CAACH,OAAH,EAAY,IAAZ,CAAL;AACA,WAAO,KAAP;AACH;AACJ","sourcesContent":["import * as firebase from 'firebase'\nimport {toast} from './toast'\nimport { error } from 'console'\n\n\nconst config = {\n    apiKey: \"AIzaSyCLjdrODSs5L1eMhqLXxs5xfOCXwohR8fw\",\n    authDomain: \"starterapp-ed1e2.firebaseapp.com\",\n    databaseURL: \"https://starterapp-ed1e2.firebaseio.com\",\n    projectId: \"starterapp-ed1e2\",\n    storageBucket: \"starterapp-ed1e2.appspot.com\",\n    messagingSenderId: \"430195180790\",\n    appId: \"1:430195180790:web:4df5acacaf4f967850d8d7\",\n    measurementId: \"G-3ZQWXEG8FL\"\n}\n\nfirebase.initializeApp(config)\n\nexport async function loginUser(username: string, password: string){\n\n//converts username into email to allow for firebase authentication\nconst email = `${username}@gmail.com`\n\ntry{\n    //if email and password are valid\n    const res = await firebase.auth().signInWithEmailAndPassword(\n        email, password)\n\n    console.log(res)\n\n    //user authenticated successfully\n    return true\n\n} catch (error) {\n    //if email and password are invalid\n    toast(error.message)\n    //user will not be authenticated\n    return false \n}\n}\n\nexport async function registerUser(username: string, password: string){\n   \n    //converts username into email to allow for firebase authentication\n    const email = `${username}@codedamn.com`\n\n    try{\n        const res = await firebase.auth().createUserWithEmailAndPassword\n        (username, password)\n        console.log(res)\n        return true\n    } catch(e){\n        toast(e.message, 4000)\n        return false\n    }\n}"]},"metadata":{},"sourceType":"module"}